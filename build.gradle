/*
 * Copyright  2021  Michał Jaroń <m.jaron@protonmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'java'
    id 'maven-publish'
}

def getVersion(){
    try {
        def procDescribe = new ProcessBuilder('git', 'describe', '--tags', '--abbrev=0')
        def procDescribeRun = procDescribe.start()
        if (procDescribeRun.waitFor() != 0) {
            throw new RuntimeException("Git describe has failed with: [" + procDescribeRun.exitValue() + "], error stream: " + new String(procDescribeRun.getErrorStream().readAllBytes()))
        }
        return new String(procDescribeRun.getInputStream().readAllBytes()).replace('\n','')
    } catch (Exception e) {
        println("git describe has failed. Let's try to fetch tags. Error description: " + e.message)
    }
    def procFetchBuilder = new ProcessBuilder('git', 'fetch', '--tags')
    def procFetchRun = procFetchBuilder.start()
    if (procFetchRun.waitFor() != 0) {
        println("Git fetch has failed with: [" + procFetchRun.exitValue() + "], error stream: " + new String(procFetchRun.getErrorStream().readAllBytes()))
    }
    println("Git fetch result: " + new String(procFetchRun.getInputStream().readAllBytes()))
    def procDescribe = new ProcessBuilder('git', 'describe', '--tags', '--abbrev=0')
    return new String(procDescribe.start().getInputStream().readAllBytes()).replace('\n','')
}

group 'pl.mjaron'
version getVersion()
println("Project version determined: $version")

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        //showStandardStreams = true
    }
}

// Source: https://docs.github.com/en/actions/guides/publishing-java-packages-with-gradle
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/mjfryc/mjaron-etudes-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

