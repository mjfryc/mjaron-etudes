/*
 * Copyright  2021  Michał Jaroń <m.jaron@protonmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

import java.io.File

plugins {
    id 'java'
    id 'maven-publish'
}

// Not used because when used as a gradle source repository points to wrong git version.
@Deprecated
def detectVersionTag() {
    /// @return Last tag or null
    def getLastTag = {
        def procAllTags = new ProcessBuilder('git', 'tag', '--sort=creatordate').start()
        def allTags = new String(procAllTags.getInputStream().readAllBytes())

        def allTagsByLine = allTags.split('\n')
        for (int i = allTagsByLine.size() - 1; i >= 0; --i) {
            def iLine = allTagsByLine[i] as String
            def iTrimmedLine = iLine.trim()
            if (!iTrimmedLine.isEmpty()) {
                return iTrimmedLine;
            }
        }
        return null
    }

    /// Fetches tags from origin
    def gitFetchTags = {
        def procFetchRun = new ProcessBuilder('git', 'fetch', '--tags').start()

        if (procFetchRun.waitFor() != 0) {
            throw new RuntimeException("Git fetch has failed with: [" + procFetchRun.exitValue() + "], error stream: " + new String(procFetchRun.getErrorStream().readAllBytes()))
        }
        println("Git fetch has finished with 0.")
    }

    def lastTagA = getLastTag()
    if (lastTagA != null) {
        return lastTagA
    }
    println("No tags found. Trying to fetch tags.")
    gitFetchTags()
    def lastTagB = getLastTag()
    if (lastTagB != null) {
        return lastTagB
    }
    throw new RuntimeException("Failed to read last tag, even after fetching tags.")
}

group 'pl.mjaron'
version "0.1.2"
println("Project version determined: $version")

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:20.1.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

//apply plugin: pl.mjaron.gradle.MjTemplate

//mjTemplate {
//    custom {
//        srcBase = 'src/main/java-templates'
//        dstBase =  buildDir.path + '/generated/'
//        job('pl.mjaron.sample.MyClass.java', "MyClass.java").param("<PARAM_1>", "plugin world!")
//    }

//    java {
//        job("MyClass.java").param("<PARAM_1>", "plugin world!!")
//    }
//
//    java {
//        job("MyClass.java").param("<PARAM_1>", "plugin world!!!").dst("ryba.java")
//    }
//}

apply plugin: pl.mjaron.gradle2.MjTemplate
mjt {
    custom("ala") {
        src = "/dev/ryba/"
        dst = "/dev/ogon"
        template("komary") {
            engine = "ryba"
        }
        template("komary") {
            engine = "krowa"
        }
    }
    custom("ala") {
        template("komary") {
            engine = "zajac"
        }
    }
    java {
        template("MyClass.java.template") {
            engine = "kruk"
        }
    }
}
//sourceSets {
//    main {
//        java {
//            srcDir buildDir.toString() + "/generated/sourceTemplate/java"
//        }
//    }
//}

//tasks.withType(JavaCompile) {
//    compileTask -> compileTask.dependsOn mjaronSourceTemplate
//}





abstract class GreetingTask extends DefaultTask {
    @TaskAction
    def greet() {
        println 'hello from GreetingTask'
    }
}
tasks.register('ryba', GreetingTask)





test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        //showStandardStreams = true
    }
}

// Source: https://docs.github.com/en/actions/guides/publishing-java-packages-with-gradle
publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/mjfryc/mjaron-etudes-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }

    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

