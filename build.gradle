/*
 * Copyright  2021  Michał Jaroń <m.jaron@protonmail.com>
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction, including
 * without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the
 * following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies
 * or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
 * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
 * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

def PROJECT_SIGNATURE = 'mjaron-etudes-java'
println("Build file execution: $PROJECT_SIGNATURE")

group 'io.github.mjfryc'
version "0.2.1"

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
    withSourcesJar()
    withJavadocJar()
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
        //showStandardStreams = true
    }
}

project.plugins.withType(MavenPublishPlugin).all {
    PublishingExtension publishing = project.extensions.getByType(PublishingExtension)
    publishing.publications.withType(MavenPublication).all { mavenPublication ->
        mavenPublication.pom {
            name = "${project.group}:${project.name}"
            description = name
            url = "https://github.com/mjfryc/$PROJECT_SIGNATURE"
            licenses {
                license {
                    name = "MIT License"
                    url = "https://raw.githubusercontent.com/mjfryc/$PROJECT_SIGNATURE/main/LICENSE"
                }
            }
            developers {
                developer {
                    id = "mjfryc"
                    name = "Michał Jaroń"
                    email = "m.jaron@protonmail.com"
                }
            }
            scm {
                connection = "scm:git:https://github.com/mjfryc/$PROJECT_SIGNATURE"
                developerConnection = "scm:git:git@github.com:mjfryc/${PROJECT_SIGNATURE}.git"
                url = "https://github.com/mjfryc/$PROJECT_SIGNATURE"
            }
        }
    }
}

// Source: https://docs.github.com/en/actions/guides/publishing-java-packages-with-gradle
// Source: https://github.com/rwinch/gradle-publish-ossrh-sample
// Source: https://docs.github.com/en/authentication/managing-commit-signature-verification/generating-a-new-gpg-key
// Source: https://github.com/rwinch/gradle-publish-ossrh-sample
publishing {
    println("Publishing: Package version: $version")
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/mjfryc/${PROJECT_SIGNATURE}"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            from(components.java)
        }
    }
}

def hasSigningKey = System.getenv("GPG_PASSWORD") != null && System.getenv("GPG_PRIVATE_KEY") != null
if (hasSigningKey) {
    System.out.println("GPG key and password found. Signing maven publications.")
    doSign(project)
} else {
    System.out.println("GPG key or password not found. Signing is skipped.")
}

void doSign(Project project) {
    println("Signing publications. All etries:")
    publishing.publications.all {
        println("    Publication: " + it.name)
    }
    project.signing {
        required { project.gradle.taskGraph.hasTask("required") }
        def signingKey = System.getenv("GPG_PRIVATE_KEY")
        def signingPassword = System.getenv("GPG_PASSWORD")
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.gpr
    }
}
